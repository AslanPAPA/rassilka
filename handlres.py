import re
import vk_api
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from app.database import insert_token_into_database, get_token_from_database

import app.keyboards as kb
from app.state import Pars, Auth



router = Router()


previous_inline_message_id = None

#–ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.Start, parse_mode='html')

#–ü–†–û–§–ò–õ–¨
@router.callback_query(F.data == 'profile')
async def send_Profile(callback: CallbackQuery):
    username = callback.from_user.username
    user_id = callback.from_user.id
    await callback.message.edit_text(f'üë§<b>–í–∞—à –Ω–∏–∫-–Ω–µ–π–º: <u>{username}</u></b>'
                                     f'  \nü§ñ<b>–í–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π ID: <u>{user_id}</u></b>',
                                     reply_markup=kb.Profile, parse_mode='html')

#–ü–ê–†–°–ï–†
@router.callback_query(F.data == 'parser')
async def send_ParsChoosePars(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>', reply_markup=kb.ChooseParsing, parse_mode='html')

@router.callback_query(StateFilter(None), F.data == 'parsSoobVk')
async def send_ParsSoobVk(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Pars.vk_soob)
    await callback.message.edit_text('<b>‚öôÔ∏è    <u>–ü–ê–†–°–ï–† –í–ö –°–û–û–ë–©–ï–°–¢–í–ê</u>    ‚öôÔ∏è</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö:</b>', reply_markup=kb.backParsChoosePars, parse_mode='html')

@router.message(Pars.vk_soob)
async def get_vk_soob_data(message: Message, state: FSMContext):

    from_user_soob_link = message.text
    if from_user_soob_link.startswith("https://vk.com/"):
        soobLink = from_user_soob_link.split("https://vk.com/")[1]
        user_id = message.from_user.id
        token = await get_token_from_database(user_id)
        if token:
            authroz = vk_api.VkApi(token=token)
            vk = authroz.get_api()
            group_id = soobLink
            get_member = vk.groups.getMembers(group_id=group_id, count=10, fields='first_name,last_name')

            member_list = []

            for member in get_member['items']:
                user_first_n = member['first_name']
                user_last_n = member['last_name']
                user_id = member['id']

                first_letter_last_name = user_last_n[0] + '.'
                member_list.append(f"<b>{user_first_n}{first_letter_last_name}</b> | https://vk.com/id{user_id}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer('\n'.join(member_list), parse_mode='html', disable_web_page_preview=True)
            await state.clear()
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É Tokens.")
    else:
        await message.answer("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö", reply_markup=kb.ChooseParsing)

#–ò–ù–°–¢–†–£–ö–¶–ò–Ø
@router.callback_query(F.data == 'instruction')
async def send_Instruction(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.Instruction, parse_mode='html', disable_web_page_preview=True)


@router.callback_query(F.data == 'getToken')
async def get_Token (callback: CallbackQuery):
    await callback.message.edit_text('<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω</b> '
                                      '\n1) –ó–∞–π–¥–∏—Ç–µ <a href=vkhost.github.io>–°–Æ–î–ê</a> '
                                      '\n2) –í—ã–±–∏—Ä–∏—Ç–µ —Ç–∏–ø <i>VK Admin</i> '
                                      '\n3) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i>–†–ê–ó–†–ï–®–ò–¢–¨</i> '
                                      '\n4) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å–∞–π—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–∫–∏–Ω—å—Ç–µ –µ–µ –±–æ—Ç—É! '
                                      '\n<b>–ì–û–¢–û–í–û</b>',
                                      reply_markup=kb.GetToken, parse_mode='html', disable_web_page_preview=True)

#–ó–ê–î–ê–ù–ò–Ø
@router.callback_query(F.data == 'task')
async def get_Task(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>', reply_markup=kb.Task, parse_mode='html')
@router.callback_query(F.data == 'accounts')
async def send_Accounts (callback: CallbackQuery):
    await callback.message.edit_text('<b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç:</b> ', reply_markup=kb.Accounts, parse_mode='html')


@router.callback_query(StateFilter(None), F.data == 'addAcc')
async def send_GetAccounts(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Auth.token)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π <a href=vkhost.github.io>–ó–î–ï–°–¨</a>:',
                                     reply_markup=kb.AddingAccount, parse_mode='html', disable_web_page_preview=True)

@router.message(Auth.token)
async def get_token_and_auth(message: Message, state: FSMContext):
    token_text = message.text
    #–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token_match = re.search(r'token=(.*?)&expires_in', token_text)
    if token_match:
        token = token_match.group(1)
        await state.update_data(token=token)
        user_id = message.from_user.id

        # existing_token = await get_token_from_database(user_id)
        # if existing_token:
        #     await message.delete()
        #     await message.answer("–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
        #     await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        #     await reply_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        #     return

        insert_into_db = await insert_token_into_database(user_id, token)
        if insert_into_db:
            try:
                vk_auth = vk_api.VkApi(token=token)
                vk = vk_auth.get_api()
                user_info = vk.users.get()
                first_name = user_info[0]['first_name']
                last_name = user_info[0]['last_name']
                await message.answer(f'–ê–∫–∫–∞—É–Ω—Ç <b>{first_name}</b>  <b>{last_name}</b> —É—Å–ø—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=kb.Countinue, parse_mode='html')
                await state.clear()
            except vk_api.AuthError as e:
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É!')
        else:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
    else:
        await message.answer("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")



@router.callback_query(F.data == 'text')
async def send_message_for_Vk(callback: CallbackQuery):
    await state.set_state(Auth.login)
    await callback.message.edit_text('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ –±–µ—Å–µ–¥—ã –í–ö:</b>', reply_markup=kb.GetTask, parse_mode='html')



@router.callback_query(F.data == 'rassilka')
async def send_Rassilka(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.Rassilka, parse_mode='html')

@router.callback_query(F.data == 'RassInLs')
async def send_RassInLs(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫–∞–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–ö (–º–∞–∫—Å –∫–æ–ª-–≤–æ: 10 —Å—Å—ã–ª–æ–∫):</b>', parse_mode='html')



@router.callback_query(F.data == 'backToStart')
async def back_to_start(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.Start, parse_mode='html')


@router.callback_query(F.data == 'backToPrfl')
async def back_to_prfl(callback: CallbackQuery):
    await send_Profile(callback)


@router.callback_query(F.data == 'backToInstruction')
async def back_to_instruction(callback: CallbackQuery):
    await send_Instruction(callback)


@router.callback_query(F.data == 'backToAcc')
async def back_to_acc(callback: CallbackQuery):
    await send_Accounts(callback)


@router.callback_query(F.data == 'backToTask')
async def back_to_task(callback: CallbackQuery):
    await get_Task(callback)


@router.callback_query(F.data == 'backToRass')
async def back_to_rass(callback: CallbackQuery):
    await send_Rassilka(callback)

@router.callback_query(F.data == 'backParsChoosePars')
async def back_to_rass(callback: CallbackQuery):
    await send_ParsChoosePars(callback)




@router.callback_query(F.data == 'InDev')
async def In_Dev(callback: CallbackQuery):
    await callback.answer('–ö–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ !', show_alert=True)